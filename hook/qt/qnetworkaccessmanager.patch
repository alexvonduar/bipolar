--- qt-everywhere-opensource-src-5.1.1\qtbase\src\network\access\qnetworkaccessmanager.cpp	Sun Jun 29 10:12:25 2014
+++ qt-everywhere-opensource-src-5.1.1\qtbase\src\network\access\qnetworkaccessmanager.new	Sun Jun 29 14:37:30 2014
@@ -71,6 +71,8 @@
 
 #include "qthread.h"
 
+#include "QtCore/qstandardpaths.h"
+
 QT_BEGIN_NAMESPACE
 
 Q_GLOBAL_STATIC(QNetworkAccessFileBackendFactory, fileBackend)
@@ -701,6 +703,22 @@
 */
 QNetworkReply *QNetworkAccessManager::post(const QNetworkRequest &request, QIODevice *data)
 {
+    // See https://github.com/pcolby/bipolar/wiki/Polar-API-V2
+    if ((data != NULL) && (!data->isSequential())) {    
+        const QString &urlPath = request.url().path();
+        if (urlPath.contains(QLatin1String("training-sessions"))) {
+            const QDir dataDir(QStandardPaths::writableLocation(QStandardPaths::DataLocation));
+            QString fileName(dataDir.path() + QDir::separator() + QLatin1String("export"));
+            dataDir.mkpath(fileName);
+            foreach (const QChar &c, urlPath) {
+                fileName += (c.isLetterOrNumber()) ? c : QChar::fromLatin1('-');
+            }
+            QFile file(fileName);
+            if (file.open(QIODevice::WriteOnly)) {
+                file.write(data->readAll());
+            }
+        }
+    }
     return d_func()->postProcess(createRequest(QNetworkAccessManager::PostOperation, request, data));
 }
 
